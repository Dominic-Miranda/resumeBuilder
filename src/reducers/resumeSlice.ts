import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../app/store';
import { ResumeState } from '../common/interface';

const initialState: ResumeState = {
  personalDetails:{
    firstName:'',
    lastName:'',
    dob:null,
    gender:''
  },
  education:[
    {
        institute:'',
        degree:'',
        from:null,
        to:null,
    }
  ],
  experience:[
    {
        company:'',
        role:'',
        from:null,
        to:null
    }
  ],
  skills:[]
};

export const resumeSilce = createSlice({
  name: 'resume',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateData: (state,action:PayloadAction<any>)=>{
        return {...state,[action.payload.key]:action.payload.data}
    },
    removeData: (state,action:PayloadAction<any>)=>{
        return {...state,[action.payload.key]:{}}
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
//   extraReducers: (builder) => {
//     builder
//       .addCase(incrementAsync.pending, (state) => {
//         state.status = 'loading';
//       })
//       .addCase(incrementAsync.fulfilled, (state, action) => {
//         state.status = 'idle';
//         state.value += action.payload;
//       })
//       .addCase(incrementAsync.rejected, (state) => {
//         state.status = 'failed';
//       });
//   },
});

export const {updateData,removeData } = resumeSilce.actions;

export const getResumeData = (state: RootState) => state.resume;

export default resumeSilce.reducer;
